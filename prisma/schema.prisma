generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointments {
  appointment_id   Int        @id @default(autoincrement())
  user_id          Int
  volunteer_id     Int
  appointment_date DateTime   @db.Timestamp(6)
  status           String     @db.VarChar(50)
  users            users      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  volunteers       volunteers @relation(fields: [volunteer_id], references: [volunteer_id], onDelete: NoAction, onUpdate: NoAction)
  reviews          reviews?
}

model communityposts {
  post_id      Int       @id @default(autoincrement())
  user_id      Int
  post_title   String    @db.VarChar(255)
  post_content String
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model notifications {
  notification_id Int       @id @default(autoincrement())
  user_id         Int
  message         String    @db.VarChar(255)
  is_read         Boolean?  @default(false)
  created_at      DateTime? @default(now()) @db.Timestamp(6)
  users           users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model questions {
  question_id   Int       @id @default(autoincrement())
  user_id       Int
  question_text String
  response      String?
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model reviews {
  review_id      Int          @id @default(autoincrement())
  appointment_id Int          @unique
  rating         Int
  comment        String?
  created_at     DateTime?    @default(now()) @db.Timestamp(6)
  appointments   appointments @relation(fields: [appointment_id], references: [appointment_id], onDelete: NoAction, onUpdate: NoAction)
}

model skills {
  skill_id     Int        @id @default(autoincrement())
  skill_name   String     @db.VarChar(255)
  volunteer_id Int
  volunteers   volunteers @relation(fields: [volunteer_id], references: [volunteer_id], onDelete: NoAction, onUpdate: NoAction)
}

model tutorials {
  tutorial_id Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @db.Timestamp(6)
}

model users {
  user_id        Int              @id @default(autoincrement())
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  password       String           @db.VarChar(255)
  role           String           @db.VarChar(50)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  appointments   appointments[]
  communityposts communityposts[]
  notifications  notifications[]
  questions      questions[]
  volunteers     volunteers[]
}

model volunteers {
  volunteer_id   Int            @id @default(autoincrement())
  user_id        Int
  expertise_area String         @db.VarChar(255)
  availability   DateTime       @db.Timestamp(6)
  created_at     DateTime?      @default(now()) @db.Timestamp(6)
  appointments   appointments[]
  skills         skills[]
  users          users          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}
